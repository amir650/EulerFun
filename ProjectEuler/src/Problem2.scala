import scala.annotation.tailrec

object Problem2 {

  def main(args: Array[String]) {

    //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
    // the first 10 terms will be:
    // 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    print(fibonacciNumbers().takeWhile(_ < 4000000).filter(isEven).sum)

  }

  def fibonacciNumbers() : Stream[Long] = Iterator.iterate(0L)(_+1L).map(fib).toStream

  def isEvenFib(n: Long) : Boolean = isEven(fib(n))

  def isEven(n: Long) : Boolean = n % 2 == 0

  def fib(n: Long) : Long  = fibonacciTail(n, 1, 0)

  @tailrec
  def fibonacciTail(num: Long, nxt: Long, res: Long): Long = {
     num match {
      case 0 => res
      case _ => fibonacciTail(num-1, nxt+res, nxt)
      }
   }

}